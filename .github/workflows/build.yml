name: Build

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  schedule:
    - cron:  '0 0 * * *'


jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scalaVersion: ['2.12.10', '2.13.1']
        javaTag: ['8u242', '11.0.6', '11.0.2-oraclelinux7', 'graalvm-ce-20.0.0-java11', 'graalvm-ce-20.0.0-java8']
        include:
          - javaTag: '8u242'
            dockerContext: 'debian'
            baseImageTag: '8u242-jdk-stretch'
          - javaTag: '11.0.6'
            dockerContext: 'debian'
            baseImageTag: '11.0.6-jdk-stretch'
          - javaTag: '11.0.2-oraclelinux7'
            dockerContext: 'oracle'
            baseImageTag: '11.0.2-jdk-oraclelinux7'
          - javaTag: 'graalvm-ce-20.0.0-java11'
            dockerContext: 'graalvm-ce'
            baseImageTag: '20.0.0-java11'
          - javaTag: 'graalvm-ce-20.0.0-java8'
            dockerContext: 'graalvm-ce'
            baseImageTag: '19.3.0-java8'
    steps:
    - uses: actions/checkout@v1
    - name: Get latest SBT version
      id: get_sbt_version
      run: |
        SBT_VERSION=$(
          curl -s https://dl.bintray.com/sbt/debian/Packages |
          grep -i -w 'sbt-[0-9]*\.[0-9]*\.[0-9]*\.deb' -o |
          grep -i -w '[0-9]*\.[0-9]*\.[0-9]*' -o |
          sort -V | tail -n 1)
        echo ::set-output name=VERSION::$SBT_VERSION
    - name: Create docker tag
      id: create_docker_tag
      run: |
        TAG=hseeberger/scala-sbt:${{ matrix.javaTag }}_${{ steps.get_sbt_version.outputs.VERSION }}_${{ matrix.scalaVersion }}
        echo ::set-output name=TAG::$TAG
    - name: Build docker image
      run: |
        docker build ${{ matrix.dockerContext }} \
            --no-cache \
            -t "${{ steps.create_docker_tag.outputs.TAG }}" \
            --build-arg BASE_IMAGE_TAG=${{ matrix.baseImageTag }} \
            --build-arg SBT_VERSION=${{ steps.get_sbt_version.outputs.VERSION }} \
            --build-arg SCALA_VERSION=${{ matrix.scalaVersion }}
    - name: Push image to DockerHub
      if: github.event_name != 'pull_request'
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u hseeberger --password-stdin
        docker push ${{ steps.create_docker_tag.outputs.TAG }}
