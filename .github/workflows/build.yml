name: Build

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  schedule:
    - cron:  '0 0 * * *'


jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scalaVersion: ['2.12.17', '2.13.10', '3.2.0']
        javaTag: [
          'openjdk-8u342',
          'openjdk-11.0.16',
          'openjdk-17.0.2',
          'openjdk-18.0.2.1',
          'openjdk-oraclelinux8-11.0.16',
          'graalvm-ce-21.3.0-java17',
          'graalvm-ce-21.3.0-java11',
          'graalvm-ce-21.2.0-java8',
          'eclipse-temurin-19_36',
          'eclipse-temurin-18.0.2',
          'eclipse-temurin-17.0.4',
          'eclipse-temurin-11.0.16'
        ]
        include:
          - javaTag: 'openjdk-8u342'
            dockerContext: 'openjdk'
            baseImageTag: '8u342-jdk-bullseye'
            platforms: 'linux/amd64,linux/arm64'
          - javaTag: 'openjdk-11.0.16'
            dockerContext: 'openjdk'
            baseImageTag: '11.0.16-jdk-bullseye'
            platforms: 'linux/amd64,linux/arm64'
          - javaTag: 'openjdk-17.0.2'
            dockerContext: 'openjdk'
            baseImageTag: '17.0.2-jdk-bullseye'
            platforms: 'linux/amd64,linux/arm64'
          - javaTag: 'openjdk-18.0.2.1'
            dockerContext: 'openjdk'
            baseImageTag: '18.0.2.1-jdk-bullseye'
            platforms: 'linux/amd64,linux/arm64'
          - javaTag: 'openjdk-oraclelinux8-11.0.16'
            dockerContext: 'openjdk-oracle'
            baseImageTag: '11.0.16-jdk-oraclelinux8'
            platforms: 'linux/amd64,linux/arm64'
          - javaTag: 'graalvm-ce-21.3.0-java17'
            dockerContext: 'graalvm-ce'
            baseImageTag: 'java17-21.3.0'
            platforms: 'linux/amd64,linux/arm64'
          - javaTag: 'graalvm-ce-21.3.0-java11'
            dockerContext: 'graalvm-ce'
            baseImageTag: 'java11-21.3.0'
            platforms: 'linux/amd64,linux/arm64'
          - javaTag: 'graalvm-ce-21.2.0-java8'
            dockerContext: 'graalvm-ce'
            baseImageTag: 'java8-21.2.0'
            platforms: 'linux/amd64,linux/arm64'
          - javaTag: 'eclipse-temurin-19_36'
            dockerContext: 'eclipse-temurin'
            baseImageTag: '19_36-jdk-jammy'
            platforms: 'linux/amd64,linux/arm64'  
          - javaTag: 'eclipse-temurin-18.0.2'
            dockerContext: 'eclipse-temurin'
            baseImageTag: '18.0.2.1_1-jdk'
            platforms: 'linux/amd64,linux/arm64'
          - javaTag: 'eclipse-temurin-17.0.4'
            dockerContext: 'eclipse-temurin'
            baseImageTag: '17.0.4.1_1-jdk'
            platforms: 'linux/amd64,linux/arm64'
          - javaTag: 'eclipse-temurin-11.0.16'
            dockerContext: 'eclipse-temurin'
            baseImageTag: '11.0.16.1_1-jdk'
            platforms: 'linux/amd64,linux/arm64'
    steps:
    - uses: actions/checkout@v3
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2.1.0
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2.2.0
      #      with:
      #        install: true
    - name: Available platforms
      run: echo ${{ steps.buildx.outputs.platforms }}
    - name: Get latest SBT version
      id: get_sbt_version
      run: |
        SBT_VERSION=$(
          curl --silent -L https://github.com/sbt/sbt/releases |
          grep -i -w -o '>[0-9]*\.[0-9]*\.[0-9]*</a>' |
          grep -i -w -o '[0-9]*\.[0-9]*\.[0-9]*' |
          sort --version-sort | tail -n 1)
        [[ -z "$SBT_VERSION" ]] && { echo "Failed to get latest sbt version" ; exit 1; }
        echo ::set-output name=VERSION::$SBT_VERSION
    - name: Create docker tag
      id: create_docker_tag
      run: |
        TAG=sbtscala/scala-sbt:${{ matrix.javaTag }}_${{ steps.get_sbt_version.outputs.VERSION }}_${{ matrix.scalaVersion }}
        echo ::set-output name=TAG::$TAG
    - name: Build docker image
      run: |
        docker build ${{ matrix.dockerContext }} \
            --no-cache \
            -t "${{ steps.create_docker_tag.outputs.TAG }}" \
            --build-arg BASE_IMAGE_TAG=${{ matrix.baseImageTag }} \
            --build-arg SBT_VERSION=${{ steps.get_sbt_version.outputs.VERSION }} \
            --build-arg SCALA_VERSION=${{ matrix.scalaVersion }}
    - name: Test docker image as root (default)
      if: ${{ !startsWith(matrix.scalaVersion, '2.12') }}
      # scala --version does not work on < 2.13
      run: |
        docker run "${{ steps.create_docker_tag.outputs.TAG }}" \
          scala --version &&
          sbt about
    - name: Test docker image scala as sbtuser
      if: ${{ !startsWith(matrix.scalaVersion, '2.12') }}
      # scala --version does not work on < 2.13
      run: |
        docker run -u sbtuser -w /home/sbtuser "${{ steps.create_docker_tag.outputs.TAG }}" \
          scala --version &&
          sbt about
    - name: Log in to DockerHub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Rebuild and push ${{ matrix.platforms }} docker images
      if: github.event_name != 'pull_request'
      run: |
        docker buildx build ${{ matrix.dockerContext }} \
            --no-cache \
            -t "${{ steps.create_docker_tag.outputs.TAG }}" \
            --build-arg BASE_IMAGE_TAG=${{ matrix.baseImageTag }} \
            --build-arg SBT_VERSION=${{ steps.get_sbt_version.outputs.VERSION }} \
            --build-arg SCALA_VERSION=${{ matrix.scalaVersion }} \
            --platform ${{ matrix.platforms }} \
            --push
